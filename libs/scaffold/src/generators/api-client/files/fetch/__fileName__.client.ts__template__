import { BaseQueryParams, IReturnMany } from '@<%= workspace %>/utils-domain-design';
import { <%= interfaceName %>, <%= createInterface %>, <%= updateInterface %>, <%= apiInterface %> } from '<%= domainImportPath %>';

// =================================================
// TODO: Update the baseURL for the API
// =================================================

const baseURL = 'http://localhost:3333/api/<%= fileName %>';

export class <%= className %>Client implements <%= apiInterface %> {
  async getOne(id: string): Promise<<%= interfaceName %>> {
    const res = await fetch(`${baseURL}/${id}`);
    return res.json();
  }

  async getMany(params?: BaseQueryParams): Promise<IReturnMany<<%= interfaceName %>>> {
    const searchParams = new URLSearchParams(params as any);
    const res = await fetch(`${baseURL}?${searchParams}`);
    return res.json();
  }

  async create(data: <%= createInterface %>): Promise<<%= interfaceName %>> {
    const res = await fetch(`${baseURL}`, {
      method: 'POST',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
      },
    });
    return res.json();
  }

  async update(data: <%= updateInterface %>): Promise<<%= interfaceName %>> {
    const res = await fetch(`${baseURL}/${data.id}`, {
      method: 'PATCH',
      body: JSON.stringify(data),
      headers: {
        'Content-Type': 'application/json',
      },
    });
    return res.json();
  }

  async delete(id: string): Promise<<%= interfaceName %>> {
    const res = await fetch(`${baseURL}/${id}`, {
      method: 'DELETE',
    });
    return res.json();
  }
}
