import { Injectable } from '@nestjs/common';
import { IReturnMany, IRepo } from '@<%= workspace %>/utils-domain-design';
import { PrismaService } from '@<%= workspace %>/prisma';
import { <%= interfaceName %>, <%= createInterface %>, <%= updateInterface %>, <%= repoInterface %> } from '<%= domainImportPath %>';

@Injectable()
export class <%= className %>Repo implements <%= repoInterface %> {
  constructor(private readonly prisma: PrismaService) {}

  getOne(id: string): Promise<<%= interfaceName %> | null> {
    return this.prisma.<%= prismaClientProperty %>.findUnique({
      where: { id },
    });
  }

  getMany(params?: unknown): Promise<IReturnMany<<%= interfaceName %>>> {
    throw new Error('Method not implemented.');
  }

  create(data: <%= createInterface %>): Promise<<%= interfaceName %>> {
    return this.prisma.<%= prismaClientProperty %>.create({
      data,
    });
  }

  update(data: <%= updateInterface %>): Promise<<%= interfaceName %>> {
    return this.prisma.<%= prismaClientProperty %>.update({
      data,
      where: {
        id: data.id,
      },
    });
  }

  delete(id: string): Promise<<%= interfaceName %>> {
    return this.prisma.<%= prismaClientProperty %>.delete({
      where: { id },
    });
  }
}

